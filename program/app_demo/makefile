APP_BINARY_NAME = qctool
INST_PATH = /tmp/tftp
ARCH?=i386

TOP_PATH = $(shell pwd)

#LDFLAGS+=-lpthread
CFLAGS+=-Werror -Wall

MODE=PRODUCTION
DEBUG=1

ifeq ("${MODE}", "PRODUCTION")
	CFLAGS+=-DPRODUCTION_MODE
endif
ifdef DEBUG
	CFLAGS+=-g -DDEBUG
else
	CFLAGS+=-O2
	COMPRESS=$(STRIP)
endif

# ==================================
# ** ARCH SETTINGS FOR L100, L200 **
# ==================================

TMP=$(shell echo $(ARCH) | tr "[a-z]" "[A-Z]")
ifneq (,$(filter L100 L200,$(TMP)))
	CROSS_COMPILE=/usr/local/arm_tools_3.3/bin/arm-elf-
	CONFIGURE_ARCH=--host=arm-elf --build=i386
	COMPRESS=flthdr -z -r -s 16384
	CFLAGS+=-DARCH_$(ARCH)
	CFLAGS+=-DUCLINUX -DIS_LITTLE_ENDIAN -D_GNU_SOURCE -D_REENTRANT -D_LARGE_THREADS -D_THREAD_SAFE
	LDFLAGS+=-Wl,-elf2flt
	PLATOS=UCLINUX
endif

# ==================================
# ** ARCH SETTINGS FOR L300, L350 **
# ==================================

TMP=$(shell echo $(ARCH) | tr "[a-z]" "[A-Z]")
ifneq (,$(filter L300 L350 N300,$(TMP)))
	CROSS_COMPILE=arm-linux-uclibc-
	CONFIGURE_ARCH=--host=arm-linux --build=i386
	CFLAGS+=-DARCH_$(ARCH)
	CFLAGS+=-DLINUX -DIS_LITTLE_ENDIAN -D_GNU_SOURCE -D_REENTRANT -D_LARGE_THREADS -D_THREAD_SAFE
	LDFLAGS+=-ldl
	PLATOS=LINUX
endif

# ============================
# ** ARCH SETTINGS FOR I386 **
# ============================

TMP=$(shell echo $(ARCH) | tr "[a-z]" "[A-Z]")
ifneq (,$(filter I386,$(TMP)))
	CROSS_COMPILE=
	CONFIGURE_ARCH=
	CFLAGS+=-DARCH_$(ARCH)
	LDFLAGS+=-ldl
	CFLAGS+=-DLINUX -DIS_LITTLE_ENDIAN
	PLATOS=LINUX
endif

# Get alll the source code folder, all the source code in the subdir will be compiled and
# archive to a static library, named lib${subdir_name}.a
OBJFILES = $(patsubst %.c,%,$(wildcard *.c))
SUBSRCS = $(shell find . -maxdepth 1 -type d|sed -n 's/.\///p'|grep -v 'libs' \
		          |grep -v '.svn'|grep -v '.git'|grep -v 'include'|grep -v 'bin')

# Add the subdir compiled static library into LDFLAGS
LDFLAGS+=$(patsubst %,-L%,$(SUBSRCS)) 
LDFLAGS+=$(patsubst %,-l%,$(SUBSRCS)) 
CFLAGS+=$(patsubst %,-I${TOP_PATH}/%,$(SUBSRCS))
CFLAGS+=-I$(TOP_PATH) 

export CC=${CROSS_COMPILE}gcc
export CXX=${CROSS_COMPILE}gcc
export AR=${CROSS_COMPILE}ar
export AS=${CROSS_COMPILE}as
export RANLIB=${CROSS_COMPILE}ranlib
export STRIP=${CROSS_COMPILE}strip
export PLATOS
export CONFIGURE_ARCH
export CFLAGS
export LDFLAGS
export ARCH

#A function used to goes into the sub-folder to compile
MAKEFUNC = @MakeSubDir() \
    { \
        for DIR in ${SUBSRCS}; do \
            if [ -d $${DIR} ] ; then \
                cd $${DIR}; \
                MakeSubDir; \
                if [ -f makefile -o -f Makefile ]; then \
                    pwd; \
                    make $(1); \
                    if [ "$$?" != "0" ]; then \
                        exit 1; \
                    fi; \
                fi; \
                cd ..; \
            fi; \
        done; \
        if [ -f makefile -o -f Makefile ]; then \
            make $(1); \
            if [ "$$?" != "0" ]; then \
                exit 1; \
            fi; \
        fi; \
    }; \

MAKEME = cd $(2); MakeSubDir $(1); cd ..;
LOOPMAKEFUNC = $(MAKEFUNC) $(foreach dir,$(SUBSRCS),$(call MAKEME,$(1),$(dir)))

.PHONY: all

all: entry version binary

entry:
	@echo " ";
	@echo " =========================================================";
	@echo " ** Come into compile ${APP_BINARY_NAME} for ARCH $(ARCH) on $(PLATOS)";
	@echo " =========================================================";
	@echo " ";

version:
	@echo "/* Generated by makefile, don't Edit it by hand */" > version.h
	@echo "#define MAJOR 2" >>version.h
	@echo "#define MINOR 0" >>version.h
	@echo "#define REVER 0" >>version.h
	@if [ -f .svn/entries ] ; then \
		echo "#define SVNVER `sed -n -e 11p .svn/entries`" >>version.h; \
	else \
		echo "#define SVNVER 0" >>version.h; \
	fi;

subdir:
	@$(call LOOPMAKEFUNC,all)
	@echo " ";
	@echo " =========================================================";
	@echo " ** Compile and linking ${APP_BINARY_NAME} for ${ARCH} now";
	@echo " =========================================================";

%: %.c
	$(CC) $< $(CFLAGS) -c -o $@.o

binary: subdir $(OBJFILES)
	$(CC) $(CFLAGS) -o $(APP_BINARY_NAME) *.o $(LDFLAGS) 
	
tag:
	@cscope -Rbq
	@ctags --c-kinds=+defglmnstuvx --langmap=c:.c.h.ho.hem.het.hec.hev.him.hit.hic.hiv -R .

install:
	sudo cp $(APP_BINARY_NAME) ${INST_PATH}

uninstall:
	rm -f ${INST_PATH}/$(APP_BINARY_NAME)

clean:
	@$(call LOOPMAKEFUNC,clean)
	@rm -f version.h
	@rm -f *.o $(APP_BINARY_NAME)
	@rm -f *.elf*
	@rm -f *.gdb

distclean: clean
	@$(call LOOPMAKEFUNC,distclean)

clear: distclean
	@rm -f tags  cscope*

