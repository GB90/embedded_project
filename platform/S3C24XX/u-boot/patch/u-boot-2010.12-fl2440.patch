diff -Nuar u-boot-2010.12/arch/arm/cpu/arm920t/start.S u-boot-2010.12-fl2440/arch/arm/cpu/arm920t/start.S
--- u-boot-2010.12/arch/arm/cpu/arm920t/start.S	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/arch/arm/cpu/arm920t/start.S	2011-03-23 23:05:31.000000000 +0800
@@ -119,10 +119,10 @@
 	orr	r0, r0, #0xd3
 	msr	cpsr, r0
 
+#if	defined(CONFIG_AT91RM9200DK) || defined(CONFIG_AT91RM9200EK)
 	bl	coloured_LED_init
 	bl	red_LED_on
 
-#if	defined(CONFIG_AT91RM9200DK) || defined(CONFIG_AT91RM9200EK)
 	/*
 	 * relocate exception table
 	 */
@@ -150,6 +150,12 @@
 #  define CLKDIVN	0x4C000014	/* clock divisor register */
 # endif
 
+#  define CLK_CTL_BASE  0x4C000000  /* guowenxue */
+#  define MDIV_405      0x7f << 12  /* guowenxue */
+#  define PSDIV_405     0x21        /* guowenxue */
+#  define MDIV_200      0xa1 << 12  /* guowenxue */
+#  define PSDIV_200     0x31        /* guowenxue */
+
 	ldr	r0, =pWTCON
 	mov	r1, #0x0
 	str	r1, [r0]
@@ -161,18 +167,72 @@
 	ldr	r0, =INTMSK
 	str	r1, [r0]
 # if defined(CONFIG_S3C2410)
-	ldr	r1, =0x3ff
+	ldr	r1, =0x7ff
 	ldr	r0, =INTSUBMSK
 	str	r1, [r0]
 # endif
 
+# if defined(CONFIG_S3C2440)
+        ldr r1, =0x7fff    /*guowenxue:There are 15 bits used in INTSUBMSK, refer to datasheet*/ 
+        ldr r0, =INTSUBMSK 
+        str r1, [r0]
+# endif
+
+#if defined(CONFIG_S3C2440) 
+        /* FCLK:HCLK:PCLK = 1:4:8 */ 
+        ldr r0, =CLKDIVN 
+        mov r1, #5 
+        str r1, [r0] 
+        
+        mrc p15, 0, r1, c1, c0, 0 
+        orr r1, r1, #0xc0000000 
+        mcr p15, 0, r1, c1, c0, 0 
+        
+        mov r1, #CLK_CTL_BASE 
+        mov r2, #MDIV_405 
+        add r2, r2, #PSDIV_405 
+        str r2, [r1, #0x04]     /* MPLLCON guowenxue */
+#else
+
 	/* FCLK:HCLK:PCLK = 1:2:4 */
 	/* default FCLK is 120 MHz ! */
 	ldr	r0, =CLKDIVN
 	mov	r1, #3
 	str	r1, [r0]
+
+        mrc p15, 0, r1, c1, c0, 0 
+        orr r1, r1, #0xc0000000 
+        mcr p15, 0, r1, c1, c0, 0   /*write ctrl register guowenxue*/ 
+        
+        mov r1, #CLK_CTL_BASE   /* guowenxue*/ 
+        mov r2, #MDIV_200 
+        add r2, r2, #PSDIV_200 
+        str r2, [r1, #0x04]
+#endif  /* CONFIG_S3C2440*/
 #endif	/* CONFIG_S3C24X0 */
 
+#ifdef CONFIG_FL2440_LED
+    /*Set GPIO5, GPIO6, GPIO8, GPIO10 as GPIO OUTPUT mode*/
+    ldr     r0, =GPBCON
+    ldr     r1, [r0]
+    bic     r1, r1, #0x3c00      /*Set GPBCON for GPIO5,GPIO6 as 0x00 */
+    orr     r1, r1, #0x1400      /*Set GPBCON for GPIO5,GPIO6 as GPIOOUT, 0x01*/
+    bic     r1, r1, #0x00330000  /*Set GPBCON for GPIO8,GPIO10 as 0x00*/
+    orr     r1, r1, #0x00110000  /*Set GPBCON for GPIO8,GPIO10 as GPIOOUT, 0x01*/
+    str     r1, [r0]
+
+    /*Set internal pullup resister*/
+    ldr     r0, =GPBUP
+    ldr     r1, [r0]
+    orr     r1, r1, #0x0560     /*Set bit 5,6,8,10, disable pullup resister*/
+    str     r1, [r0]
+
+    ldr     r2, =GPBDAT
+    ldr     r3, [r2]
+    bic     r3, r3, #0x0560  /*Set bit 5,6,8,10 as high level, turn all off*/
+    str     r3, [r2]
+#endif
+
 	/*
 	 * we do sys-critical inits only at reboot,
 	 * not when booting from ram!
@@ -181,6 +241,122 @@
 	bl	cpu_init_crit
 #endif
 
+/*==========================  Boot from Nandflash  ===========================*/
+
+#define LENGTH_UBOOT 0x40000
+#define NAND_CTL_BASE 0x4E000000
+
+#ifdef CONFIG_FL2440_NANDBOOT
+/* Offset */
+#define oNFCONF 0x00
+#define oNFCONT 0x04
+#define oNFCMD 0x08
+#define oNFSTAT 0x20
+
+    @ reset NAND
+    mov r1, #NAND_CTL_BASE
+    ldr r2, =( (7<<12)|(7<<8)|(7<<4)|(0<<0) )
+    str r2, [r1, #oNFCONF]
+    ldr r2, [r1, #oNFCONF]
+
+    ldr r2, =( (1<<4)|(0<<1)|(1<<0) )   @ Active low CE Control
+    str r2, [r1, #oNFCONT]
+    ldr r2, [r1, #oNFCONT]
+
+    ldr r2, =(0x6)  @ RnB Clear
+    str r2, [r1, #oNFSTAT]
+    ldr r2, [r1, #oNFSTAT]
+
+    mov r2, #0xff   @ RESET command
+    strb    r2, [r1, #oNFCMD]
+
+    /* Loop to wait */
+    mov r3, #0  @ wait
+nand1:
+    add r3, r3, #0x1
+    cmp r3, #0xa
+    blt nand1
+
+    /*Loop wait Nandflash ready*/
+nand2:
+    ldr r2, [r1, #oNFSTAT]  @ wait ready
+    tst r2, #0x4
+    beq nand2
+
+
+    ldr r2, [r1, #oNFCONT]
+    orr r2, r2, #0x2    @ Flash Memory Chip Disable
+    str r2, [r1, #oNFCONT]
+
+    @ get read to call C functions (for nand_read())
+    ldr sp, DW_STACK_START  @ setup stack pointer
+    mov fp, #0  @ no previous frame, so fp=0
+
+#ifdef CONFIG_FL2440_LED
+    ldr     r2, =GPBDAT 
+    ldr     r3, [r2]
+    bic     r3, r3, #(1<<LED0)  /*Turn LED0 on*/
+    str     r3, [r2]
+#endif
+
+    @ copy U-Boot to RAM
+    ldr r0, =_TEXT_BASE
+    mov r1, #0x0
+    mov r2, #LENGTH_UBOOT
+    bl  nand_read_ll
+    tst r0, #0x0      /*Check nand_read_ll() return value*/
+    beq ok_nand_read  /*nand_read_ll() return OK*/
+
+#ifdef CONFIG_FL2440_LED
+    ldr     r2, =GPBDAT 
+    ldr     r3, [r2]
+    bic     r3, r3, #(1<<LED1)  /*Turn LED0 on*/
+    str     r3, [r2]
+#endif
+
+bad_nand_read:
+loop2:
+    b   loop2   @ infinite loop
+
+ok_nand_read:
+#ifdef CONFIG_FL2440_LED
+    ldr     r2, =GPBDAT 
+    ldr     r3, [r2]
+    bic     r3, r3, #(1<<LED2)  /*Turn LED2 on*/
+    str     r3, [r2]
+#endif
+
+    @ verify
+    mov r0, #0
+    ldr r1, =_TEXT_BASE
+    mov r2, #0x400  @ 4 bytes * 1024 = 4K-bytes
+go_next:
+    ldr r3, [r0], #4
+    ldr r4, [r1], #4
+    teq r3, r4
+    bne notmatch
+    subs    r2, r2, #4
+    beq stack_setup
+    bne go_next
+
+notmatch:
+#ifdef CONFIG_FL2440_LED
+    ldr     r2, =GPBDAT 
+    ldr     r3, [r2]
+    bic     r3, r3, #(1<<LED3)  /*Turn LED2 on*/
+    str     r3, [r2]
+#endif
+
+loop3:
+    b   loop3   @ infinite loop
+#endif  /*End of CONFIG_FL2440_NANDBOOT*/
+
+#define STACK_BASE 0x33f00000
+#define STACK_SIZE 0x8000
+    .align  2 
+DW_STACK_START: .word   STACK_BASE+STACK_SIZE-4
+
+
 /* Set stackpointer in internal RAM to call board_init_f */
 call_board_init_f:
 	ldr	sp, =(CONFIG_SYS_INIT_SP_ADDR)
@@ -277,8 +453,8 @@
 	cmp	r0, r1
 	bne	clbss_l
 
-	bl coloured_LED_init
-	bl red_LED_on
+@	bl coloured_LED_init
+@	bl red_LED_on
 #endif
 
 /*
diff -Nuar u-boot-2010.12/arch/arm/cpu/arm920t/u-boot.lds u-boot-2010.12-fl2440/arch/arm/cpu/arm920t/u-boot.lds
--- u-boot-2010.12/arch/arm/cpu/arm920t/u-boot.lds	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/arch/arm/cpu/arm920t/u-boot.lds	2011-03-23 21:32:25.000000000 +0800
@@ -40,6 +40,8 @@
 	.text :
 	{
 		arch/arm/cpu/arm920t/start.o	(.text)
+                board/kkernel/fl2440/lowlevel_init.o    (.text)
+                board/kkernel/fl2440/nand_read.o    (.text)
 		*(.text)
 	}
 
diff -Nuar u-boot-2010.12/arch/arm/lib/board.c u-boot-2010.12-fl2440/arch/arm/lib/board.c
--- u-boot-2010.12/arch/arm/lib/board.c	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/arch/arm/lib/board.c	2011-03-23 21:32:25.000000000 +0800
@@ -92,6 +92,7 @@
  ************************************************************************
  * May be supplied by boards if desired
  */
+#if 0  /* Comment by guowenxue to reduce u-boot size */
 void inline __coloured_LED_init (void) {}
 void coloured_LED_init (void) __attribute__((weak, alias("__coloured_LED_init")));
 void inline __red_LED_on (void) {}
@@ -110,6 +111,7 @@
 void blue_LED_on(void) __attribute__((weak, alias("__blue_LED_on")));
 void inline __blue_LED_off(void) {}
 void blue_LED_off(void) __attribute__((weak, alias("__blue_LED_off")));
+#endif
 
 /************************************************************************
  * Init Utilities							*
@@ -136,7 +138,8 @@
 
 static int display_banner (void)
 {
-	printf ("\n\n%s\n\n", version_string);
+	printf ("\n\n%s\n", version_string);
+        printf ("Modify by Guo Wenxue(guowenxue@gmail.com)\n\n");
 	debug ("U-Boot code: %08lX -> %08lX  BSS: -> %08lX\n",
 	       _TEXT_BASE,
 	       _bss_start_ofs+_TEXT_BASE, _bss_end_ofs+_TEXT_BASE);
@@ -445,6 +448,7 @@
  ************************************************************************
  */
 
+/* Called in arch/arm/cpu/arm920t/start.S, comment by guowenxue */
 void board_init_r (gd_t *id, ulong dest_addr)
 {
 	char *s;
diff -Nuar u-boot-2010.12/arch/arm/lib/eabi_compat.c u-boot-2010.12-fl2440/arch/arm/lib/eabi_compat.c
--- u-boot-2010.12/arch/arm/lib/eabi_compat.c	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/arch/arm/lib/eabi_compat.c	2011-03-23 21:32:25.000000000 +0800
@@ -13,7 +13,6 @@
 
 int raise (int signum)
 {
-	printf("raise: Signal # %d caught\n", signum);
 	return 0;
 }
 
diff -Nuar u-boot-2010.12/board/kkernel/fl2440/config.mk u-boot-2010.12-fl2440/board/kkernel/fl2440/config.mk
--- u-boot-2010.12/board/kkernel/fl2440/config.mk	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2010.12-fl2440/board/kkernel/fl2440/config.mk	2011-03-23 21:32:30.000000000 +0800
@@ -0,0 +1,23 @@
+#
+# (C) Copyright 2002
+# Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
+# David Mueller, ELSOFT AG, <d.mueller@elsoft.ch>
+#
+# SAMSUNG SMDK2410 board with S3C2410X (ARM920T) cpu
+#
+# see http://www.samsung.com/ for more information on SAMSUNG
+#
+
+#
+# SMDK2410 has 1 bank of 64 MB DRAM
+#
+# 3000'0000 to 3400'0000
+#
+# Linux-Kernel is expected to be at 3000'8000, entry 3000'8000
+# optionally with a ramdisk at 3080'0000
+#
+# we load ourself to 33F8'0000
+#
+# download area is 3300'0000
+
+CONFIG_SYS_TEXT_BASE = 0x33F80000
diff -Nuar u-boot-2010.12/board/kkernel/fl2440/fl2440.c u-boot-2010.12-fl2440/board/kkernel/fl2440/fl2440.c
--- u-boot-2010.12/board/kkernel/fl2440/fl2440.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2010.12-fl2440/board/kkernel/fl2440/fl2440.c	2011-03-23 21:32:30.000000000 +0800
@@ -0,0 +1,220 @@
+/*
+ * (C) Copyright 2002
+ * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
+ * Marius Groeger <mgroeger@sysgo.de>
+ *
+ * (C) Copyright 2002
+ * David Mueller, ELSOFT AG, <d.mueller@elsoft.ch>
+ *
+ * (C) Copyright 2005
+ * JinHua Luo, GuangDong Linux Center, <luo.jinhua@gd-linux.com>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <netdev.h>
+#include <asm/arch/s3c24x0_cpu.h>
+
+#if defined(CONFIG_CMD_NAND)
+#include <linux/mtd/nand.h>
+#endif
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define FCLK_SPEED 1
+
+#if FCLK_SPEED==0		/* Fout = 203MHz, Fin = 12MHz for Audio */
+#define M_MDIV	0xC3
+#define M_PDIV	0x4
+#define M_SDIV	0x1
+
+#elif FCLK_SPEED==1		/* Fout = 202.8MHz */
+
+#if defined(CONFIG_S3C2410)
+/*  Fout = 202.8MHz */
+#define M_MDIV  0xA1
+#define M_PDIV  0x3
+#define M_SDIV  0x1
+#endif
+
+#if defined(CONFIG_S3C2440)
+/*  Fout = 405MHz */
+#define M_MDIV 0x7f 
+#define M_PDIV 0x2
+#define M_SDIV 0x1
+#endif
+
+#endif
+
+#define USB_CLOCK 1
+
+#if USB_CLOCK==0
+#define U_M_MDIV	0xA1
+#define U_M_PDIV	0x3
+#define U_M_SDIV	0x1
+#elif USB_CLOCK==1
+#if defined(CONFIG_S3C2410)
+#define U_M_MDIV	0x48
+#define U_M_PDIV	0x3
+#endif
+
+#if defined(CONFIG_S3C2440)
+#define U_M_MDIV	0x38
+#define U_M_PDIV	0x2
+#endif
+
+#define U_M_SDIV	0x2
+#endif
+
+static inline void delay (unsigned long loops)
+{
+	__asm__ volatile ("1:\n"
+			  "subs %0, %1, #1\n"
+			  "bne 1b":"=r" (loops):"0" (loops));
+}
+
+/*
+ * Miscellaneous platform dependent initialisations
+ */
+
+int board_init (void)
+{
+	struct s3c24x0_clock_power * const clk_power =
+					s3c24x0_get_base_clock_power();
+	struct s3c24x0_gpio * const gpio = s3c24x0_get_base_gpio();
+
+	/* to reduce PLL lock time, adjust the LOCKTIME register */
+	clk_power->locktime = 0xFFFFFF;
+
+	/* configure MPLL */
+	clk_power->mpllcon = ((M_MDIV << 12) + (M_PDIV << 4) + M_SDIV);
+
+	/* some delay between MPLL and UPLL */
+	delay (4000);
+
+	/* configure UPLL */
+	clk_power->upllcon = ((U_M_MDIV << 12) + (U_M_PDIV << 4) + U_M_SDIV);
+
+	/* some delay between MPLL and UPLL */
+	delay (8000);
+
+	/* set up the I/O ports */
+	gpio->gpacon = 0x007FFFFF;
+	gpio->gpbcon = 0x00DDD7FC; /* Set GPB5,GPB6,GPB8,GPB10 as GPIO mode, GPB0(Buzzer) as Input mode */
+	gpio->gpbup = 0x000007FF;  /* Disable pull up  */
+	gpio->gpccon = 0xAAAAAAAA;
+	gpio->gpcup = 0x0000FFFF;
+	gpio->gpdcon = 0xAAAAAAAA;
+	gpio->gpdup = 0x0000FFFF;
+	gpio->gpecon = 0xAAAAAAAA;
+	gpio->gpeup = 0x0000FFFF;
+	gpio->gpfcon = 0x000055AA;
+	gpio->gpfup = 0x000000FF;
+	gpio->gpgcon = 0xFF95FF3A;
+	gpio->gpgup = 0x0000FFFF;
+	gpio->gphcon = 0x0016FAAA;
+	gpio->gphup = 0x000007FF;
+
+	gpio->extint0 = 0x22222222;
+	gpio->extint1 = 0x22222222;
+	gpio->extint2 = 0x22222222;
+
+	/* arch number of SMDK2410-Board */
+	gd->bd->bi_arch_number = MACH_TYPE_MINI2440;
+
+	/* adress of boot parameters */
+	gd->bd->bi_boot_params = 0x30000100;
+
+	icache_enable();
+	dcache_enable();
+
+	return 0;
+}
+
+int dram_init (void)
+{
+	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
+	gd->bd->bi_dram[0].size = PHYS_SDRAM_1_SIZE;
+        gd->ram_size = PHYS_SDRAM_1_SIZE;
+
+	return 0;
+}
+
+#if 0 /* Comment by guowenxue */
+#if defined(CONFIG_CMD_NAND)
+extern ulong nand_probe(ulong physadr);
+
+static inline void NF_Reset(void)
+{
+	int i;
+
+	NF_SetCE(NFCE_LOW);
+	NF_Cmd(0xFF);		/* reset command */
+	for(i = 0; i < 10; i++);	/* tWB = 100ns. */
+	NF_WaitRB();		/* wait 200~500us; */
+	NF_SetCE(NFCE_HIGH);
+}
+
+static inline void NF_Init(void)
+{
+#if 1
+#define TACLS   0
+#define TWRPH0  3
+#define TWRPH1  0
+#else
+#define TACLS   0
+#define TWRPH0  4
+#define TWRPH1  2
+#endif
+
+	NF_Conf((1<<15)|(0<<14)|(0<<13)|(1<<12)|(1<<11)|(TACLS<<8)|(TWRPH0<<4)|(TWRPH1<<0));
+	/*nand->NFCONF = (1<<15)|(1<<14)|(1<<13)|(1<<12)|(1<<11)|(TACLS<<8)|(TWRPH0<<4)|(TWRPH1<<0); */
+	/* 1  1    1     1,   1      xxx,  r xxx,   r xxx */
+	/* En 512B 4step ECCR nFCE=H tACLS   tWRPH0   tWRPH1 */
+
+	NF_Reset();
+}
+
+void nand_init(void)
+{
+	struct s3c2410_nand * const nand = s3c2410_get_base_nand();
+
+	NF_Init();
+#ifdef DEBUG
+	printf("NAND flash probing at 0x%.8lX\n", (ulong)nand);
+#endif
+	printf ("%4lu MB\n", nand_probe((ulong)nand) >> 20);
+}
+#endif
+#endif /* Comment by guowenxue*/ */
+
+#ifdef CONFIG_CMD_NET
+int board_eth_init(bd_t *bis)
+{
+	int rc = 0;
+#ifdef CONFIG_CS8900
+	rc = cs8900_initialize(0, CONFIG_CS8900_BASE);
+#endif
+#ifdef CONFIG_DRIVER_DM9000 /* Add by guowenxue*/
+        rc = dm9000_initialize(bis);
+#endif
+	return rc;
+}
+#endif
diff -Nuar u-boot-2010.12/board/kkernel/fl2440/flash.c u-boot-2010.12-fl2440/board/kkernel/fl2440/flash.c
--- u-boot-2010.12/board/kkernel/fl2440/flash.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2010.12-fl2440/board/kkernel/fl2440/flash.c	2011-03-23 21:32:30.000000000 +0800
@@ -0,0 +1,431 @@
+/*
+ * (C) Copyright 2002
+ * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
+ * Alex Zuepke <azu@sysgo.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+
+ulong myflush (void);
+
+#define FLASH_BANK_SIZE	PHYS_FLASH_SIZE
+#define MAIN_SECT_SIZE  0x10000	/* 64 KB */
+
+flash_info_t flash_info[CONFIG_SYS_MAX_FLASH_BANKS];
+
+#define CMD_READ_ARRAY		0x000000F0
+#define CMD_UNLOCK1		0x000000AA
+#define CMD_UNLOCK2		0x00000055
+#define CMD_ERASE_SETUP		0x00000080
+#define CMD_ERASE_CONFIRM	0x00000030
+#define CMD_PROGRAM		0x000000A0
+#define CMD_UNLOCK_BYPASS	0x00000020
+
+#define MEM_FLASH_ADDR1		(*(volatile u16 *)(CONFIG_SYS_FLASH_BASE + (0x00000555 << 1)))
+#define MEM_FLASH_ADDR2		(*(volatile u16 *)(CONFIG_SYS_FLASH_BASE + (0x000002AA << 1)))
+
+#define BIT_ERASE_DONE		0x00000080
+#define BIT_RDY_MASK		0x00000080
+#define BIT_PROGRAM_ERROR	0x00000020
+#define BIT_TIMEOUT		0x80000000	/* our flag */
+
+#define READY 1
+#define ERR   2
+#define TMO   4
+
+/*-----------------------------------------------------------------------
+ */
+
+ulong flash_init (void)
+{
+	int i, j;
+	ulong size = 0;
+
+	for (i = 0; i < CONFIG_SYS_MAX_FLASH_BANKS; i++) {
+		ulong flashbase = 0;
+
+		flash_info[i].flash_id =
+#if defined(CONFIG_AMD_LV400)
+			(AMD_MANUFACT & FLASH_VENDMASK) |
+			(AMD_ID_LV400B & FLASH_TYPEMASK);
+#elif defined(CONFIG_AMD_LV800)
+			(AMD_MANUFACT & FLASH_VENDMASK) |
+			(AMD_ID_LV800B & FLASH_TYPEMASK);
+#else
+#error "Unknown flash configured"
+#endif
+			flash_info[i].size = FLASH_BANK_SIZE;
+		flash_info[i].sector_count = CONFIG_SYS_MAX_FLASH_SECT;
+		memset (flash_info[i].protect, 0, CONFIG_SYS_MAX_FLASH_SECT);
+		if (i == 0)
+			flashbase = PHYS_FLASH_1;
+		else
+			panic ("configured too many flash banks!\n");
+		for (j = 0; j < flash_info[i].sector_count; j++) {
+			if (j <= 3) {
+				/* 1st one is 16 KB */
+				if (j == 0) {
+					flash_info[i].start[j] =
+						flashbase + 0;
+				}
+
+				/* 2nd and 3rd are both 8 KB */
+				if ((j == 1) || (j == 2)) {
+					flash_info[i].start[j] =
+						flashbase + 0x4000 + (j -
+								      1) *
+						0x2000;
+				}
+
+				/* 4th 32 KB */
+				if (j == 3) {
+					flash_info[i].start[j] =
+						flashbase + 0x8000;
+				}
+			} else {
+				flash_info[i].start[j] =
+					flashbase + (j - 3) * MAIN_SECT_SIZE;
+			}
+		}
+		size += flash_info[i].size;
+	}
+
+	flash_protect (FLAG_PROTECT_SET,
+		       CONFIG_SYS_FLASH_BASE,
+		       CONFIG_SYS_FLASH_BASE + monitor_flash_len - 1,
+		       &flash_info[0]);
+
+	flash_protect (FLAG_PROTECT_SET,
+		       CONFIG_ENV_ADDR,
+		       CONFIG_ENV_ADDR + CONFIG_ENV_SIZE - 1, &flash_info[0]);
+
+	return size;
+}
+
+/*-----------------------------------------------------------------------
+ */
+void flash_print_info (flash_info_t * info)
+{
+	int i;
+
+	switch (info->flash_id & FLASH_VENDMASK) {
+	case (AMD_MANUFACT & FLASH_VENDMASK):
+		printf ("AMD: ");
+		break;
+	default:
+		printf ("Unknown Vendor ");
+		break;
+	}
+
+	switch (info->flash_id & FLASH_TYPEMASK) {
+	case (AMD_ID_LV400B & FLASH_TYPEMASK):
+		printf ("1x Amd29LV400BB (4Mbit)\n");
+		break;
+	case (AMD_ID_LV800B & FLASH_TYPEMASK):
+		printf ("1x Amd29LV800BB (8Mbit)\n");
+		break;
+	default:
+		printf ("Unknown Chip Type\n");
+		goto Done;
+		break;
+	}
+
+	printf ("  Size: %ld MB in %d Sectors\n",
+		info->size >> 20, info->sector_count);
+
+	printf ("  Sector Start Addresses:");
+	for (i = 0; i < info->sector_count; i++) {
+		if ((i % 5) == 0) {
+			printf ("\n   ");
+		}
+		printf (" %08lX%s", info->start[i],
+			info->protect[i] ? " (RO)" : "     ");
+	}
+	printf ("\n");
+
+      Done:;
+}
+
+/*-----------------------------------------------------------------------
+ */
+
+int flash_erase (flash_info_t * info, int s_first, int s_last)
+{
+	ushort result;
+	int iflag, cflag, prot, sect;
+	int rc = ERR_OK;
+	int chip;
+
+	/* first look for protection bits */
+
+	if (info->flash_id == FLASH_UNKNOWN)
+		return ERR_UNKNOWN_FLASH_TYPE;
+
+	if ((s_first < 0) || (s_first > s_last)) {
+		return ERR_INVAL;
+	}
+
+	if ((info->flash_id & FLASH_VENDMASK) !=
+	    (AMD_MANUFACT & FLASH_VENDMASK)) {
+		return ERR_UNKNOWN_FLASH_VENDOR;
+	}
+
+	prot = 0;
+	for (sect = s_first; sect <= s_last; ++sect) {
+		if (info->protect[sect]) {
+			prot++;
+		}
+	}
+	if (prot)
+		return ERR_PROTECTED;
+
+	/*
+	 * Disable interrupts which might cause a timeout
+	 * here. Remember that our exception vectors are
+	 * at address 0 in the flash, and we don't want a
+	 * (ticker) exception to happen while the flash
+	 * chip is in programming mode.
+	 */
+	cflag = icache_status ();
+	icache_disable ();
+	iflag = disable_interrupts ();
+
+	/* Start erase on unprotected sectors */
+	for (sect = s_first; sect <= s_last && !ctrlc (); sect++) {
+		printf ("Erasing sector %2d ... ", sect);
+
+		/* arm simple, non interrupt dependent timer */
+		reset_timer_masked ();
+
+		if (info->protect[sect] == 0) {	/* not protected */
+			vu_short *addr = (vu_short *) (info->start[sect]);
+
+			MEM_FLASH_ADDR1 = CMD_UNLOCK1;
+			MEM_FLASH_ADDR2 = CMD_UNLOCK2;
+			MEM_FLASH_ADDR1 = CMD_ERASE_SETUP;
+
+			MEM_FLASH_ADDR1 = CMD_UNLOCK1;
+			MEM_FLASH_ADDR2 = CMD_UNLOCK2;
+			*addr = CMD_ERASE_CONFIRM;
+
+			/* wait until flash is ready */
+			chip = 0;
+
+			do {
+				result = *addr;
+
+				/* check timeout */
+				if (get_timer_masked () >
+				    CONFIG_SYS_FLASH_ERASE_TOUT) {
+					MEM_FLASH_ADDR1 = CMD_READ_ARRAY;
+					chip = TMO;
+					break;
+				}
+
+				if (!chip
+				    && (result & 0xFFFF) & BIT_ERASE_DONE)
+					chip = READY;
+
+				if (!chip
+				    && (result & 0xFFFF) & BIT_PROGRAM_ERROR)
+					chip = ERR;
+
+			} while (!chip);
+
+			MEM_FLASH_ADDR1 = CMD_READ_ARRAY;
+
+			if (chip == ERR) {
+				rc = ERR_PROG_ERROR;
+				goto outahere;
+			}
+			if (chip == TMO) {
+				rc = ERR_TIMOUT;
+				goto outahere;
+			}
+
+			printf ("ok.\n");
+		} else {	/* it was protected */
+
+			printf ("protected!\n");
+		}
+	}
+
+	if (ctrlc ())
+		printf ("User Interrupt!\n");
+
+      outahere:
+	/* allow flash to settle - wait 10 ms */
+	udelay_masked (10000);
+
+	if (iflag)
+		enable_interrupts ();
+
+	if (cflag)
+		icache_enable ();
+
+	return rc;
+}
+
+/*-----------------------------------------------------------------------
+ * Copy memory to flash
+ */
+
+static int write_hword (flash_info_t * info, ulong dest, ushort data)
+{
+	vu_short *addr = (vu_short *) dest;
+	ushort result;
+	int rc = ERR_OK;
+	int cflag, iflag;
+	int chip;
+
+	/*
+	 * Check if Flash is (sufficiently) erased
+	 */
+	result = *addr;
+	if ((result & data) != data)
+		return ERR_NOT_ERASED;
+
+
+	/*
+	 * Disable interrupts which might cause a timeout
+	 * here. Remember that our exception vectors are
+	 * at address 0 in the flash, and we don't want a
+	 * (ticker) exception to happen while the flash
+	 * chip is in programming mode.
+	 */
+	cflag = icache_status ();
+	icache_disable ();
+	iflag = disable_interrupts ();
+
+	MEM_FLASH_ADDR1 = CMD_UNLOCK1;
+	MEM_FLASH_ADDR2 = CMD_UNLOCK2;
+	MEM_FLASH_ADDR1 = CMD_UNLOCK_BYPASS;
+	*addr = CMD_PROGRAM;
+	*addr = data;
+
+	/* arm simple, non interrupt dependent timer */
+	reset_timer_masked ();
+
+	/* wait until flash is ready */
+	chip = 0;
+	do {
+		result = *addr;
+
+		/* check timeout */
+		if (get_timer_masked () > CONFIG_SYS_FLASH_ERASE_TOUT) {
+			chip = ERR | TMO;
+			break;
+		}
+		if (!chip && ((result & 0x80) == (data & 0x80)))
+			chip = READY;
+
+		if (!chip && ((result & 0xFFFF) & BIT_PROGRAM_ERROR)) {
+			result = *addr;
+
+			if ((result & 0x80) == (data & 0x80))
+				chip = READY;
+			else
+				chip = ERR;
+		}
+
+	} while (!chip);
+
+	*addr = CMD_READ_ARRAY;
+
+	if (chip == ERR || *addr != data)
+		rc = ERR_PROG_ERROR;
+
+	if (iflag)
+		enable_interrupts ();
+
+	if (cflag)
+		icache_enable ();
+
+	return rc;
+}
+
+/*-----------------------------------------------------------------------
+ * Copy memory to flash.
+ */
+
+int write_buff (flash_info_t * info, uchar * src, ulong addr, ulong cnt)
+{
+	ulong cp, wp;
+	int l;
+	int i, rc;
+	ushort data;
+
+	wp = (addr & ~1);	/* get lower word aligned address */
+
+	/*
+	 * handle unaligned start bytes
+	 */
+	if ((l = addr - wp) != 0) {
+		data = 0;
+		for (i = 0, cp = wp; i < l; ++i, ++cp) {
+			data = (data >> 8) | (*(uchar *) cp << 8);
+		}
+		for (; i < 2 && cnt > 0; ++i) {
+			data = (data >> 8) | (*src++ << 8);
+			--cnt;
+			++cp;
+		}
+		for (; cnt == 0 && i < 2; ++i, ++cp) {
+			data = (data >> 8) | (*(uchar *) cp << 8);
+		}
+
+		if ((rc = write_hword (info, wp, data)) != 0) {
+			return (rc);
+		}
+		wp += 2;
+	}
+
+	/*
+	 * handle word aligned part
+	 */
+	while (cnt >= 2) {
+		data = *((vu_short *) src);
+		if ((rc = write_hword (info, wp, data)) != 0) {
+			return (rc);
+		}
+		src += 2;
+		wp += 2;
+		cnt -= 2;
+	}
+
+	if (cnt == 0) {
+		return ERR_OK;
+	}
+
+	/*
+	 * handle unaligned tail bytes
+	 */
+	data = 0;
+	for (i = 0, cp = wp; i < 2 && cnt > 0; ++i, ++cp) {
+		data = (data >> 8) | (*src++ << 8);
+		--cnt;
+	}
+	for (; i < 2; ++i, ++cp) {
+		data = (data >> 8) | (*(uchar *) cp << 8);
+	}
+
+	return write_hword (info, wp, data);
+}
diff -Nuar u-boot-2010.12/board/kkernel/fl2440/lowlevel_init.S u-boot-2010.12-fl2440/board/kkernel/fl2440/lowlevel_init.S
--- u-boot-2010.12/board/kkernel/fl2440/lowlevel_init.S	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2010.12-fl2440/board/kkernel/fl2440/lowlevel_init.S	2011-03-23 21:32:30.000000000 +0800
@@ -0,0 +1,174 @@
+/*
+ * Memory Setup stuff - taken from blob memsetup.S
+ *
+ * Copyright (C) 1999 2000 2001 Erik Mouw (J.A.K.Mouw@its.tudelft.nl) and
+ *                     Jan-Derk Bakker (J.D.Bakker@its.tudelft.nl)
+ *
+ * Modified for the Samsung SMDK2410 by
+ * (C) Copyright 2002
+ * David Mueller, ELSOFT AG, <d.mueller@elsoft.ch>
+ *
+ * Modified for the friendly-arm SBC-2410X by
+ * (C) Copyright 2005
+ * JinHua Luo, GuangDong Linux Center, <luo.jinhua@gd-linux.com>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <config.h>
+#include <version.h>
+
+/*
+ * Taken from linux/arch/arm/boot/compressed/head-s3c2410.S
+ *
+ * Copyright (C) 2002 Samsung Electronics SW.LEE  <hitchcar@sec.samsung.com>
+ */
+
+#define BWSCON	0x48000000
+
+/* BWSCON */
+#define DW8			(0x0)
+#define DW16			(0x1)
+#define DW32			(0x2)
+#define WAIT			(0x1<<2)
+#define UBLB			(0x1<<3)
+
+#define B1_BWSCON		(DW32)
+#define B2_BWSCON		(DW16)
+#define B3_BWSCON		(DW16 + WAIT + UBLB)
+#define B4_BWSCON		(DW16)
+#define B5_BWSCON		(DW16)
+#define B6_BWSCON		(DW32)
+#define B7_BWSCON		(DW32)
+
+#define B0_Tacs			0x0
+#define B0_Tcos			0x0
+#define B0_Tacc			0x7
+#define B0_Tcoh			0x0
+#define B0_Tah			0x0
+#define B0_Tacp			0x0
+#define B0_PMC			0x0
+
+#define B1_Tacs			0x0
+#define B1_Tcos			0x0
+#define B1_Tacc			0x7
+#define B1_Tcoh			0x0
+#define B1_Tah			0x0
+#define B1_Tacp			0x0
+#define B1_PMC			0x0
+
+#define B2_Tacs			0x0
+#define B2_Tcos			0x0
+#define B2_Tacc			0x7
+#define B2_Tcoh			0x0
+#define B2_Tah			0x0
+#define B2_Tacp			0x0
+#define B2_PMC			0x0
+
+#define B3_Tacs			0xc
+#define B3_Tcos			0x7
+#define B3_Tacc			0xf
+#define B3_Tcoh			0x1
+#define B3_Tah			0x0
+#define B3_Tacp			0x0
+#define B3_PMC			0x0
+
+#define B4_Tacs			0x0
+#define B4_Tcos			0x0
+#define B4_Tacc			0x7
+#define B4_Tcoh			0x0
+#define B4_Tah			0x0
+#define B4_Tacp			0x0
+#define B4_PMC			0x0
+
+#define B5_Tacs			0xc
+#define B5_Tcos			0x7
+#define B5_Tacc			0xf
+#define B5_Tcoh			0x1
+#define B5_Tah			0x0
+#define B5_Tacp			0x0
+#define B5_PMC			0x0
+
+#define B6_MT			0x3	/* SDRAM */
+#define B6_Trcd			0x1
+#define B6_SCAN			0x1	/* 9bit */
+
+#define B7_MT			0x3	/* SDRAM */
+#define B7_Trcd			0x1	/* 3clk */
+#define B7_SCAN			0x1	/* 9bit */
+
+/* REFRESH parameter */
+#define REFEN			0x1	/* Refresh enable */
+#define TREFMD			0x0	/* CBR(CAS before RAS)/Auto refresh */
+#define Trc			0x3	/* 7clk */
+#define Tchr			0x2	/* 3clk */
+
+
+#if defined(CONFIG_S3C2440) /*For 64M RAM, add by kkernel*/
+#define Trp                     0x2     /* 4clk */
+#define REFCNT                  1012
+#else
+#define Trp			0x0	/* 2clk */
+#define REFCNT			0x0459
+#endif
+
+
+/**************************************/
+
+_TEXT_BASE:
+	.word	CONFIG_SYS_TEXT_BASE
+
+.globl lowlevel_init
+lowlevel_init:
+	/* memory control configuration */
+	/* make r0 relative the current location so that it */
+	/* reads SMRDATA out of FLASH rather than memory ! */
+	ldr     r0, =SMRDATA
+        ldr     r1, =lowlevel_init
+	sub	r0, r0, r1
+        adr     r3, lowlevel_init       /* r3 <- current position of code   */
+        add     r0, r0, r3
+	ldr	r1, =BWSCON	/* Bus Width Status Controller */
+	add     r2, r0, #13*4
+0:
+	ldr     r3, [r0], #4
+	str     r3, [r1], #4
+	cmp     r2, r0
+	bne     0b
+
+	/* everything is fine now */
+	mov	pc, lr
+
+	.ltorg
+/* the literal pools origin */
+
+SMRDATA:
+    .word (0+(B1_BWSCON<<4)+(B2_BWSCON<<8)+(B3_BWSCON<<12)+(B4_BWSCON<<16)+(B5_BWSCON<<20)+(B6_BWSCON<<24)+(B7_BWSCON<<28))
+    .word ((B0_Tacs<<13)+(B0_Tcos<<11)+(B0_Tacc<<8)+(B0_Tcoh<<6)+(B0_Tah<<4)+(B0_Tacp<<2)+(B0_PMC))
+    .word ((B1_Tacs<<13)+(B1_Tcos<<11)+(B1_Tacc<<8)+(B1_Tcoh<<6)+(B1_Tah<<4)+(B1_Tacp<<2)+(B1_PMC))
+    .word ((B2_Tacs<<13)+(B2_Tcos<<11)+(B2_Tacc<<8)+(B2_Tcoh<<6)+(B2_Tah<<4)+(B2_Tacp<<2)+(B2_PMC))
+    .word ((B3_Tacs<<13)+(B3_Tcos<<11)+(B3_Tacc<<8)+(B3_Tcoh<<6)+(B3_Tah<<4)+(B3_Tacp<<2)+(B3_PMC))
+    .word ((B4_Tacs<<13)+(B4_Tcos<<11)+(B4_Tacc<<8)+(B4_Tcoh<<6)+(B4_Tah<<4)+(B4_Tacp<<2)+(B4_PMC))
+    .word ((B5_Tacs<<13)+(B5_Tcos<<11)+(B5_Tacc<<8)+(B5_Tcoh<<6)+(B5_Tah<<4)+(B5_Tacp<<2)+(B5_PMC))
+    .word ((B6_MT<<15)+(B6_Trcd<<2)+(B6_SCAN))
+    .word ((B7_MT<<15)+(B7_Trcd<<2)+(B7_SCAN))
+    .word ((REFEN<<23)+(TREFMD<<22)+(Trp<<20)+(Trc<<18)+(Tchr<<16)+REFCNT)
+    .word 0xb2
+    .word 0x30
+    .word 0x30
diff -Nuar u-boot-2010.12/board/kkernel/fl2440/Makefile u-boot-2010.12-fl2440/board/kkernel/fl2440/Makefile
--- u-boot-2010.12/board/kkernel/fl2440/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2010.12-fl2440/board/kkernel/fl2440/Makefile	2011-03-23 21:32:30.000000000 +0800
@@ -0,0 +1,53 @@
+#
+# (C) Copyright 2000-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+include $(TOPDIR)/config.mk
+
+LIB	= $(obj)lib$(BOARD).o
+
+COBJS	:= fl2440.o nand_read.o flash.o
+SOBJS	:= lowlevel_init.o
+
+SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+SOBJS	:= $(addprefix $(obj),$(SOBJS))
+
+$(LIB):	$(obj).depend $(OBJS) $(SOBJS)
+	$(AR) $(ARFLAGS) $@ $(OBJS) $(SOBJS)
+
+#$(call cmd_link_o_target, $(OBJS) $(SOBJS))
+
+clean:
+	rm -f $(SOBJS) $(OBJS)
+
+distclean:	clean
+	rm -f $(LIB) core *.bak $(obj).depend
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff -Nuar u-boot-2010.12/board/kkernel/fl2440/nand_read.c u-boot-2010.12-fl2440/board/kkernel/fl2440/nand_read.c
--- u-boot-2010.12/board/kkernel/fl2440/nand_read.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2010.12-fl2440/board/kkernel/fl2440/nand_read.c	2011-03-23 22:54:13.000000000 +0800
@@ -0,0 +1,273 @@
+/*
+ * nand_read.c: Simple NAND read functions for booting from NAND
+ *
+ * This is used by cpu/arm920/start.S assembler code,
+ * and the board-specific linker script must make sure this
+ * file is linked within the first 4kB of NAND flash.
+ *
+ * Taken from GPLv2 licensed vivi bootloader,
+ * Copyright (C) 2002 MIZI Research, Inc.
+ *
+ * Author: Hwang, Chideok <hwang@mizi.com>
+ * Date  : $Date: 2004/02/04 10:37:37 $
+ *
+ * u-boot integration and bad-block skipping (C) 2006 by OpenMoko, Inc.
+ * Author: Harald Welte <laforge@openmoko.org>
+ */
+
+#include <common.h>
+#include <linux/mtd/nand.h>
+
+
+#define __REGb(x)	(*(volatile unsigned char *)(x))
+#define __REGw(x)	(*(volatile unsigned short *)(x))
+#define __REGi(x)	(*(volatile unsigned int *)(x))
+#define NF_BASE		0x4e000000
+#if defined(CONFIG_S3C2410)
+#define NFCONF		__REGi(NF_BASE + 0x0)
+#define NFCMD		__REGb(NF_BASE + 0x4)
+#define NFADDR		__REGb(NF_BASE + 0x8)
+#define NFDATA		__REGb(NF_BASE + 0xc)
+#define NFSTAT		__REGb(NF_BASE + 0x10)
+#define NFSTAT_BUSY	1
+#define nand_select()	(NFCONF &= ~0x800)
+#define nand_deselect()	(NFCONF |= 0x800)
+#define nand_clear_RnB()	do {} while (0)
+#elif defined(CONFIG_S3C2440) || defined(CONFIG_S3C2442)
+#define NFCONF		__REGi(NF_BASE + 0x0)
+#define NFCONT		__REGi(NF_BASE + 0x4)
+#define NFCMD		__REGb(NF_BASE + 0x8)
+#define NFADDR		__REGb(NF_BASE + 0xc)
+#define NFDATA		__REGb(NF_BASE + 0x10)
+#define NFDATA16	__REGw(NF_BASE + 0x10)
+#define NFSTAT		__REGb(NF_BASE + 0x20)
+#define NFSTAT_BUSY	1
+#define nand_select()	(NFCONT &= ~(1 << 1))
+#define nand_deselect()	(NFCONT |= (1 << 1))
+#define nand_clear_RnB()	(NFSTAT |= (1 << 2))
+#endif
+
+static inline void nand_wait(void)
+{
+	int i;
+
+	while (!(NFSTAT & NFSTAT_BUSY))
+		for (i=0; i<10; i++);
+}
+
+struct boot_nand_t {
+	int page_size;
+	int block_size;
+	int bad_block_offset;
+//	unsigned long size;
+};
+
+#if 0
+#if defined(CONFIG_S3C2410) || defined(CONFIG_MINI2440)
+/* configuration for 2410 with 512byte sized flash */
+#define NAND_PAGE_SIZE		512
+#define BAD_BLOCK_OFFSET	5
+#define NAND_BLOCK_MASK		(NAND_PAGE_SIZE - 1)
+#define NAND_BLOCK_SIZE		0x4000
+#else
+/* configuration for 2440 with 2048byte sized flash */
+#define NAND_5_ADDR_CYCLE
+#define NAND_PAGE_SIZE		2048
+#define BAD_BLOCK_OFFSET	NAND_PAGE_SIZE
+#define	NAND_BLOCK_MASK		(NAND_PAGE_SIZE - 1)
+#define NAND_BLOCK_SIZE		(NAND_PAGE_SIZE * 64)
+#endif
+
+/* compile time failure in case of an invalid configuration */
+#if defined(CONFIG_S3C2410) && (NAND_PAGE_SIZE != 512)
+#error "S3C2410 does not support nand page size != 512"
+#endif
+#endif
+
+static int is_bad_block(struct boot_nand_t * nand, unsigned long i)
+{
+	unsigned char data;
+	unsigned long page_num;
+
+	nand_clear_RnB();
+	if (nand->page_size == 512) {
+		NFCMD = NAND_CMD_READOOB; /* 0x50 */
+		NFADDR = nand->bad_block_offset & 0xf;
+		NFADDR = (i >> 9) & 0xff;
+		NFADDR = (i >> 17) & 0xff;
+		NFADDR = (i >> 25) & 0xff;
+	} else if (nand->page_size == 2048) {
+		page_num = i >> 11; /* addr / 2048 */
+		NFCMD = NAND_CMD_READ0;
+		NFADDR = nand->bad_block_offset & 0xff;
+		NFADDR = (nand->bad_block_offset >> 8) & 0xff;
+		NFADDR = page_num & 0xff;
+		NFADDR = (page_num >> 8) & 0xff;
+		NFADDR = (page_num >> 16) & 0xff;
+		NFCMD = NAND_CMD_READSTART;
+	} else {
+		return -1;
+	}
+	nand_wait();
+	data = (NFDATA & 0xff);
+	if (data != 0xff)
+		return 1;
+
+	return 0;
+}
+
+static int nand_read_page_ll(struct boot_nand_t * nand, unsigned char *buf, unsigned long addr)
+{
+	unsigned short *ptr16 = (unsigned short *)buf;
+	unsigned int i, page_num;
+
+	nand_clear_RnB();
+
+	NFCMD = NAND_CMD_READ0;
+
+	if (nand->page_size == 512) {
+		/* Write Address */
+		NFADDR = addr & 0xff;
+		NFADDR = (addr >> 9) & 0xff;
+		NFADDR = (addr >> 17) & 0xff;
+		NFADDR = (addr >> 25) & 0xff;
+	} else if (nand->page_size == 2048) {
+		page_num = addr >> 11; /* addr / 2048 */
+		/* Write Address */
+		NFADDR = 0;
+		NFADDR = 0;
+		NFADDR = page_num & 0xff;
+		NFADDR = (page_num >> 8) & 0xff;
+		NFADDR = (page_num >> 16) & 0xff;
+		NFCMD = NAND_CMD_READSTART;
+	} else {
+		return -1;
+	}
+	nand_wait();
+
+#if defined(CONFIG_S3C2410)
+	for (i = 0; i < nand->page_size; i++) {
+		*buf = (NFDATA & 0xff);
+		buf++;
+	}
+#elif defined(CONFIG_S3C2440) || defined(CONFIG_S3C2442)
+	for (i = 0; i < (nand->page_size>>1); i++) {
+		*ptr16 = NFDATA16;
+		ptr16++;
+	}
+#endif
+
+	return nand->page_size;
+}
+
+static unsigned short nand_read_id()
+{
+	unsigned short res = 0;
+	NFCMD = NAND_CMD_READID;
+	NFADDR = 0;
+	res = NFDATA;
+	res = (res << 8) | NFDATA;
+	return res;
+}
+
+extern unsigned int dynpart_size[];
+
+#define GPBCON   (*(unsigned long volatile *)0x56000010)
+#define GPBDAT   (*(unsigned long volatile *)0x56000014)
+#define GPBUP    (*(unsigned long volatile *)0x56000018)
+#define BEEP         0    /* Buzzer us GPB0 */ 
+#define DELAY_TIME   40000000
+
+static inline void delay (unsigned long loops)
+{
+    __asm__ volatile ("1:\n"
+                      "subs %0, %1, #1\n"
+                      "bne 1b":"=r" (loops):"0" (loops));
+}
+
+
+static inline void beep(int times)
+{
+    GPBCON = (GPBCON|0x3)&0x1; /*  Set GPB0 as GPIO output mode(0x01) */ 
+    GPBUP &= ~1;               /*  Enable pullup resister */ 
+
+    GPBDAT |= 0x560;
+    while(times--)
+    {
+        GPBDAT |= 1<<BEEP;     /*  Set Beep GPIO as high level, enable beep */
+        delay(DELAY_TIME);
+
+        GPBDAT &= ~(1<<BEEP);  /*  Set Beep GPIO as low level, disable beep */
+        delay(DELAY_TIME);
+    }
+}
+
+
+/* low level nand read function */
+int nand_read_ll(unsigned char *buf, unsigned long start_addr, int size)
+{
+	int i, j;
+	unsigned short nand_id;
+	struct boot_nand_t nand;
+
+
+
+	/* chip Enable */
+	nand_select();
+	nand_clear_RnB();
+	
+	for (i = 0; i < 10; i++)
+		;
+	nand_id = nand_read_id();
+	if (0) { /* dirty little hack to detect if nand id is misread */
+		unsigned short * nid = (unsigned short *)0x31fffff0;
+		*nid = nand_id;
+	}	
+
+       if (nand_id == 0xec76 ||		/* Samsung K91208 */
+           nand_id == 0xad76 ) {	/*Hynix HY27US08121A*/
+		nand.page_size = 512;
+		nand.block_size = 16 * 1024;
+		nand.bad_block_offset = 5;
+	//	nand.size = 0x4000000;
+	} else if (nand_id == 0xecf1 ||	/* Samsung K9F1G08U0B */
+		   nand_id == 0xecda ||	/* Samsung K9F2G08U0B */
+		   nand_id == 0xecd3 )	{ /* Samsung K9K8G08 */
+        beep(1);   /* FL2440 comes here */
+		nand.page_size = 2048;
+		nand.block_size = 128 * 1024;
+		nand.bad_block_offset = nand.page_size;
+	//	nand.size = 0x8000000;
+	} else {
+        beep(10);
+		return -1; // hang
+	}
+
+	if ((start_addr & (nand.block_size-1)) || (size & ((nand.block_size-1))))
+    {
+        beep(10);
+		return -1;	/* invalid alignment */
+    }
+
+	for (i=start_addr; i < (start_addr + size);) {
+#ifdef CONFIG_S3C2410_NAND_SKIP_BAD
+		if (i & (nand.block_size-1)== 0) {
+			if (is_bad_block(&nand, i) ||
+			    is_bad_block(&nand, i + nand.page_size)) {
+				/* Bad block */
+				i += nand.block_size;
+				size += nand.block_size;
+				continue;
+			}
+		}
+#endif
+		j = nand_read_page_ll(&nand, buf, i);
+		i += j;
+		buf += j;
+	}
+
+	/* chip Disable */
+	nand_deselect();
+    beep(2);
+	return 0;
+}
diff -Nuar u-boot-2010.12/boards.cfg u-boot-2010.12-fl2440/boards.cfg
--- u-boot-2010.12/boards.cfg	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/boards.cfg	2011-03-23 21:32:17.000000000 +0800
@@ -66,6 +66,7 @@
 VCMA9                        arm         arm920t     vcma9               mpl            s3c24x0
 smdk2400                     arm         arm920t     -                   samsung        s3c24x0
 smdk2410                     arm         arm920t     -                   samsung        s3c24x0
+fl2440                       arm         arm920t     -                   kkernel        s3c24x0
 netstar                      arm         arm925t
 voiceblue                    arm         arm925t
 omap1510inn                  arm         arm925t     -                   ti
diff -Nuar u-boot-2010.12/do.sh u-boot-2010.12-fl2440/do.sh
--- u-boot-2010.12/do.sh	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2010.12-fl2440/do.sh	2011-03-23 21:32:56.000000000 +0800
@@ -0,0 +1,5 @@
+#!/bin/sh
+
+make fl2440_config
+make
+cp u-boot.bin ~/winxp --reply=yes
diff -Nuar u-boot-2010.12/drivers/mtd/nand/s3c2410_nand.c u-boot-2010.12-fl2440/drivers/mtd/nand/s3c2410_nand.c
--- u-boot-2010.12/drivers/mtd/nand/s3c2410_nand.c	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/drivers/mtd/nand/s3c2410_nand.c	2011-03-23 21:32:17.000000000 +0800
@@ -24,6 +24,9 @@
 #include <asm/arch/s3c24x0_cpu.h>
 #include <asm/io.h>
 
+#define NF_BASE         0x4e000000
+
+#if defined(CONFIG_S3C2410)
 #define S3C2410_NFCONF_EN          (1<<15)
 #define S3C2410_NFCONF_512BYTE     (1<<14)
 #define S3C2410_NFCONF_4STEP       (1<<13)
@@ -36,6 +39,20 @@
 #define S3C2410_ADDR_NALE 4
 #define S3C2410_ADDR_NCLE 8
 
+#elif defined(CONFIG_S3C2440)
+#define S3C2410_NFCONT_EN          (1<<0)
+#define S3C2410_NFCONT_INITECC     (1<<4)
+#define S3C2410_NFCONT_nFCE        (1<<1)
+#define S3C2410_NFCONT_MAINECCLOCK (1<<5)
+#define S3C2410_NFCONF_TACLS(x)    ((x)<<12)
+#define S3C2410_NFCONF_TWRPH0(x)   ((x)<<8)
+#define S3C2410_NFCONF_TWRPH1(x)   ((x)<<4)
+
+#define S3C2410_ADDR_NALE 0x08
+#define S3C2410_ADDR_NCLE 0x0c
+#endif
+ulong IO_ADDR_W = NF_BASE;
+
 #ifdef CONFIG_NAND_SPL
 
 /* in the early stage of NAND flash booting, printf() is not available */
@@ -53,36 +70,51 @@
 
 static void s3c2410_hwcontrol(struct mtd_info *mtd, int cmd, unsigned int ctrl)
 {
-	struct nand_chip *chip = mtd->priv;
+//	struct nand_chip *chip = mtd->priv;
+#if defined(CONFIG_S3C2410)
 	struct s3c2410_nand *nand = s3c2410_get_base_nand();
+#elif defined(CONFIG_S3C2440)
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+#endif
 
 	debugX(1, "hwcontrol(): 0x%02x 0x%02x\n", cmd, ctrl);
 
 	if (ctrl & NAND_CTRL_CHANGE) {
-		ulong IO_ADDR_W = (ulong)nand;
+                IO_ADDR_W = (ulong)nand;
 
 		if (!(ctrl & NAND_CLE))
 			IO_ADDR_W |= S3C2410_ADDR_NCLE;
 		if (!(ctrl & NAND_ALE))
 			IO_ADDR_W |= S3C2410_ADDR_NALE;
 
-		chip->IO_ADDR_W = (void *)IO_ADDR_W;
+//		chip->IO_ADDR_W = (void *)IO_ADDR_W;
 
 		if (ctrl & NAND_NCE)
-			writel(readl(&nand->nfconf) & ~S3C2410_NFCONF_nFCE,
-			       &nand->nfconf);
+#if defined(CONFIG_S3C2410)
+			writel(readl(&nand->nfconf) & ~S3C2410_NFCONF_nFCE, &nand->nfconf);
+#elif defined(CONFIG_S3C2440)
+			writel(readl(&nand->nfcont) & ~S3C2410_NFCONT_nFCE, &nand->nfcont);
+#endif
 		else
-			writel(readl(&nand->nfconf) | S3C2410_NFCONF_nFCE,
-			       &nand->nfconf);
+#if defined(CONFIG_S3C2410)
+			writel(readl(&nand->nfconf) | S3C2410_NFCONF_nFCE, &nand->nfconf);
+#elif defined(CONFIG_S3C2440)
+			writel(readl(&nand->nfcont) | S3C2410_NFCONT_nFCE, &nand->nfcont);
+#endif
 	}
 
 	if (cmd != NAND_CMD_NONE)
-		writeb(cmd, chip->IO_ADDR_W);
+                writeb(cmd, (void *)IO_ADDR_W);
 }
 
 static int s3c2410_dev_ready(struct mtd_info *mtd)
 {
+#if defined(CONFIG_S3C2410)
 	struct s3c2410_nand *nand = s3c2410_get_base_nand();
+#elif defined(CONFIG_S3C2440)
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+#endif
+
 	debugX(1, "dev_ready\n");
 	return readl(&nand->nfstat) & 0x01;
 }
@@ -90,15 +122,27 @@
 #ifdef CONFIG_S3C2410_NAND_HWECC
 void s3c2410_nand_enable_hwecc(struct mtd_info *mtd, int mode)
 {
+#if defined(CONFIG_S3C2410)
 	struct s3c2410_nand *nand = s3c2410_get_base_nand();
+#elif defined(CONFIG_S3C2440)
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+#endif
 	debugX(1, "s3c2410_nand_enable_hwecc(%p, %d)\n", mtd, mode);
+#if defined(CONFIG_S3C2410)
 	writel(readl(&nand->nfconf) | S3C2410_NFCONF_INITECC, &nand->nfconf);
+#elif defined(CONFIG_S3C2440)
+        writel(readl(&nand->nfcont) | S3C2410_NFCONT_INITECC, &nand->nfcont);
+#endif
 }
 
 static int s3c2410_nand_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
 				      u_char *ecc_code)
 {
+#if defined(CONFIG_S3C2410)
 	struct s3c2410_nand *nand = s3c2410_get_base_nand();
+#elif defined(CONFIG_S3C2440)
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+#endif
 	ecc_code[0] = readb(&nand->nfecc);
 	ecc_code[1] = readb(&nand->nfecc + 1);
 	ecc_code[2] = readb(&nand->nfecc + 2);
@@ -126,22 +170,21 @@
 	u_int32_t cfg;
 	u_int8_t tacls, twrph0, twrph1;
 	struct s3c24x0_clock_power *clk_power = s3c24x0_get_base_clock_power();
+#if defined(CONFIG_S3C2410)
 	struct s3c2410_nand *nand_reg = s3c2410_get_base_nand();
+#elif defined(CONFIG_S3C2440)
+	struct s3c2440_nand *nand_reg = s3c2440_get_base_nand();
+#endif
 
 	debugX(1, "board_nand_init()\n");
 
 	writel(readl(&clk_power->clkcon) | (1 << 4), &clk_power->clkcon);
 
+#if defined(CONFIG_S3C2410)
 	/* initialize hardware */
-#if defined(CONFIG_S3C24XX_CUSTOM_NAND_TIMING)
-	tacls  = CONFIG_S3C24XX_TACLS;
-	twrph0 = CONFIG_S3C24XX_TWRPH0;
-	twrph1 =  CONFIG_S3C24XX_TWRPH1;
-#else
-	tacls = 4;
-	twrph0 = 8;
-	twrph1 = 8;
-#endif
+	twrph0 = 3;
+	twrph1 = 0;
+	tacls = 0;
 
 	cfg = S3C2410_NFCONF_EN;
 	cfg |= S3C2410_NFCONF_TACLS(tacls - 1);
@@ -150,8 +193,23 @@
 	writel(cfg, &nand_reg->nfconf);
 
 	/* initialize nand_chip data structure */
-	nand->IO_ADDR_R = (void *)&nand_reg->nfdata;
-	nand->IO_ADDR_W = (void *)&nand_reg->nfdata;
+	nand->IO_ADDR_R = nand->IO_ADDR_W = (void *)&nand_reg->nfdata;
+#elif defined(CONFIG_S3C2440)
+        twrph0 = 4; 
+        twrph1 = 2; 
+        tacls = 0; 
+
+        cfg = 0; 
+        cfg |= S3C2410_NFCONF_TACLS(tacls - 1); 
+        cfg |= S3C2410_NFCONF_TWRPH0(twrph0 - 1); 
+        cfg |= S3C2410_NFCONF_TWRPH1(twrph1 - 1); 
+        writel(cfg, &nand_reg->nfcont); 
+        
+        cfg = (0<<13)|(0<<12)|(0<<10)|(0<<9)|(0<<8)|(0<<6)|(0<<5)|(1<<4)|(0<<1)|(1<<0); 
+        writel(cfg, &nand_reg->nfcont); 
+        /* initialize nand_chip data structure */ 
+        nand->IO_ADDR_R = nand->IO_ADDR_W = (void *)&nand_reg->nfdata;
+#endif
 
 	nand->select_chip = NULL;
 
diff -Nuar u-boot-2010.12/drivers/net/dm9000x.c u-boot-2010.12-fl2440/drivers/net/dm9000x.c
--- u-boot-2010.12/drivers/net/dm9000x.c	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/drivers/net/dm9000x.c	2011-03-23 21:32:17.000000000 +0800
@@ -360,6 +360,7 @@
 	/* Enable TX/RX interrupt mask */
 	DM9000_iow(DM9000_IMR, IMR_PAR);
 
+#if 0
 	i = 0;
 	while (!(phy_read(1) & 0x20)) {	/* autonegation complete bit */
 		udelay(1000);
@@ -369,6 +370,7 @@
 			return 0;
 		}
 	}
+#endif
 
 	/* see what we've got */
 	lnk = phy_read(17) >> 12;
@@ -442,6 +444,7 @@
 */
 static void dm9000_halt(struct eth_device *netdev)
 {
+#if 0
 	DM9000_DBG("%s\n", __func__);
 
 	/* RESET devie */
@@ -449,6 +452,7 @@
 	DM9000_iow(DM9000_GPR, 0x01);	/* Power-Down PHY */
 	DM9000_iow(DM9000_IMR, 0x80);	/* Disable all interrupt */
 	DM9000_iow(DM9000_RCR, 0x00);	/* Disable RX */
+#endif
 }
 
 /*
diff -Nuar u-boot-2010.12/include/configs/fl2440.h u-boot-2010.12-fl2440/include/configs/fl2440.h
--- u-boot-2010.12/include/configs/fl2440.h	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2010.12-fl2440/include/configs/fl2440.h	2011-03-23 22:37:48.000000000 +0800
@@ -0,0 +1,277 @@
+/*
+ * (C) Copyright 2002
+ * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
+ * Marius Groeger <mgroeger@sysgo.de>
+ * Gary Jennejohn <garyj@denx.de>
+ * David Mueller <d.mueller@elsoft.ch>
+ *
+ * Modified for the friendly-arm SBC-2410X by
+ * (C) Copyright 2005
+ * JinHua Luo, GuangDong Linux Center, <luo.jinhua@gd-linux.com>
+ *
+ * Configuation settings for the friendly-arm SBC-2410X board.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+/*
+ * If we are developing, we might want to start armboot from ram
+ * so we MUST NOT initialize critical regs like mem-timing ...
+ */
+#undef CONFIG_SKIP_LOWLEVEL_INIT	/* undef for developing */
+#define CONFIG_FL2440_NANDBOOT 1
+
+/*
+ * High Level Configuration Options
+ * (easy to change)
+ */
+#define CONFIG_ARM920T	1	/* This is an ARM920T Core	*/
+#define CONFIG_S3C24X0	1	/* in a SAMSUNG S3C24x0-type SoC	*/
+#define CONFIG_S3C2440	1	/* specifically a SAMSUNG S3C2440 SoC	*/
+#define CONFIG_S3C2440	1	/* on a FL2440 Board  */
+#define CONFIG_MINI2440 1   /*  FL2440 is copy from friendly-arm MINI2440 Board */ */
+#define CONFIG_FL2440_LED     1
+#define CONFIG_S3C2410_NAND_SKIP_BAD    1
+
+#ifdef CONFIG_FL2440_LED 
+#define GPBCON   0x56000010
+#define GPBDAT   0x56000014
+#define GPBUP    0x56000018
+
+/* LED0->GPB5, LED1->GPB6, LED2->GPB8, LED3->GPB10 */
+#define LED0            5
+#define LED1            6
+#define LED2            8
+#define LED3            10
+
+/* 
+#define LED1_ON         0xFDF
+#define LED2_ON         0xFBF
+#define LED3_ON         0xEFF
+#define LED4_ON         0xBFF
+*/
+#define LEDALL_ON       0xA9F
+#define LEDALL_OFF      0xFFF
+#endif
+
+
+/* input clock of PLL */
+#define CONFIG_SYS_CLK_FREQ	12000000/* the SBC2410X has 12MHz input clock */
+
+
+#define USE_920T_MMU		1
+#undef CONFIG_USE_IRQ			/* we don't need IRQ/FIQ stuff */
+
+/*
+ * Size of malloc() pool
+ */
+#define CONFIG_SYS_MALLOC_LEN		(CONFIG_ENV_SIZE + 128*1024)
+#define CONFIG_SYS_GBL_DATA_SIZE        128     /*  size in bytes reserved for initial data */ */
+
+/*
+ * Hardware drivers
+ */
+#if 0  /* Comment by guowenxue, don't have CS8900 on FL2440 board  */
+#define CONFIG_NET_MULTI
+#define CONFIG_CS8900		/* we have a CS8900 on-board */
+#define CONFIG_CS8900_BASE	0x19000300
+#define CONFIG_CS8900_BUS16	/* the Linux driver does accesses as shorts */
+#endif
+
+#define CONFIG_NET_MULTI            1
+#define CONFIG_NET_RETRY_COUNT      20
+#define CONFIG_DRIVER_DM9000        1
+#define CONFIG_DM9000_BASE          0x20000300  /*  nGCS4*/
+#define DM9000_IO                   CONFIG_DM9000_BASE
+#define DM9000_DATA                 (CONFIG_DM9000_BASE+4)
+#define CONFIG_DM9000_USE_16BIT     1
+#define CONFIG_DM9000_NO_SROM       1
+#undef CONFIG_DM9000_DEBUG
+//#define CONFIG_DM9000_DEBUG*/
+
+
+/*
+ * select serial console configuration
+ */
+#define CONFIG_S3C24X0_SERIAL
+#define CONFIG_SERIAL1          1	/* we use SERIAL 1 on SBC2410X */
+
+/************************************************************
+ * RTC
+ ************************************************************/
+#define	CONFIG_RTC_S3C24X0	1
+
+/* allow to overwrite serial and ethaddr */
+#define CONFIG_ENV_OVERWRITE
+
+#define CONFIG_BAUDRATE		115200
+
+
+/*
+ * BOOTP options
+ */
+/*
+#define CONFIG_BOOTP_BOOTFILESIZE
+#define CONFIG_BOOTP_BOOTPATH
+#define CONFIG_BOOTP_GATEWAY
+#define CONFIG_BOOTP_HOSTNAME
+*/
+
+
+/*
+ * Command line configuration.
+ */
+#include <config_cmd_default.h>
+
+#define CONFIG_CMD_ASKENV
+#define CONFIG_CMD_CACHE
+#define CONFIG_CMD_DATE
+#define CONFIG_CMD_DHCP
+#define CONFIG_CMD_ELF
+#define CONFIG_CMD_PING
+#define CONFIG_CMD_NET
+#define CONFIG_CMD_NAND
+#define CONFIG_CMD_SAVEENV
+
+#define CONFIG_BOOTDELAY	2
+#define CONFIG_BOOTARGS		"console=ttySAC0,115200 mem=64M initrd=0x3800000,16M " \
+		                "root=/dev/ram0 rw loglevel=7 "
+#define CONFIG_ETHADDR	        00:08:3e:26:0a:6b
+#define CONFIG_NETMASK          255.255.255.0
+#define CONFIG_IPADDR		192.168.1.234
+#define CONFIG_SERVERIP		192.168.1.155
+#define CONFIG_BOOTCOMMAND	"tftp 30008000 uImage-s3c.gz;tftp 38000000 ramdisk.gz;bootm 30008000"
+
+#if defined(CONFIG_CMD_KGDB)
+#define CONFIG_KGDB_BAUDRATE	115200		/* speed to run kgdb serial port */
+/* what's this ? it's not used anywhere */
+#define CONFIG_KGDB_SER_INDEX	1		/* which serial port to use */
+#endif
+
+/*
+ * Miscellaneous configurable options
+ */
+#define	CONFIG_SYS_LONGHELP				/* undef to save memory		*/
+#define	CONFIG_SYS_PROMPT		"[ guowenxue@fl2440 ]# "	/* Monitor Command Prompt	*/
+#define	CONFIG_SYS_CBSIZE		256		/* Console I/O Buffer Size	*/
+#define	CONFIG_SYS_PBSIZE (CONFIG_SYS_CBSIZE+sizeof(CONFIG_SYS_PROMPT)+16) /* Print Buffer Size */
+#define	CONFIG_SYS_MAXARGS		16		/* max number of command args	*/
+#define CONFIG_SYS_BARGSIZE		CONFIG_SYS_CBSIZE	/* Boot Argument Buffer Size	*/
+
+#define CONFIG_SYS_MEMTEST_START	0x30000000	/* memtest works on	*/
+#define CONFIG_SYS_MEMTEST_END		0x33F00000	/* 63 MB in DRAM	*/
+
+#define	CONFIG_SYS_LOAD_ADDR		0x33000000	/* default load address	*/
+
+#define	CONFIG_SYS_HZ			1000
+
+/* valid baudrates */
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+
+/*-----------------------------------------------------------------------
+ * Stack sizes
+ *
+ * The stack sizes are set up in start.S using the settings below
+ */
+#define CONFIG_STACKSIZE	(128*1024)	/* regular stack */
+#ifdef CONFIG_USE_IRQ
+#define CONFIG_STACKSIZE_IRQ	(4*1024)	/* IRQ stack */
+#define CONFIG_STACKSIZE_FIQ	(4*1024)	/* FIQ stack */
+#endif
+
+/*-----------------------------------------------------------------------
+ * Physical Memory Map
+ */
+#define CONFIG_NR_DRAM_BANKS	1	   /* we have 1 bank of DRAM */
+#define PHYS_SDRAM_1		0x30000000 /* SDRAM Bank #1 */
+#define PHYS_SDRAM_1_SIZE	0x04000000 /* 64 MB */
+
+#define CONFIG_SYS_SDRAM_BASE   PHYS_SDRAM_1
+#define CONFIG_SYS_INIT_SP_ADDR (CONFIG_SYS_TEXT_BASE-GENERATED_GBL_DATA_SIZE)
+
+#define PHYS_FLASH_1		0x00000000 /* Flash Bank #1 */
+
+#define CONFIG_SYS_FLASH_BASE		PHYS_FLASH_1
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+/* #define CONFIG_AMD_LV400	1	/\* uncomment this if you have a LV400 flash *\/ */
+
+#define CONFIG_AMD_LV800	1	/* uncomment this if you have a LV800 flash */
+
+#define CONFIG_SYS_MAX_FLASH_BANKS	1	/* max number of memory banks */
+
+#ifdef CONFIG_AMD_LV800
+#define PHYS_FLASH_SIZE		0x00100000 /* 1MB */
+#define CONFIG_SYS_MAX_FLASH_SECT	(19)	/* max number of sectors on one chip */
+#define CONFIG_ENV_ADDR		(CONFIG_SYS_FLASH_BASE + 0x0F0000) /* addr of environment */
+#endif
+
+#ifdef CONFIG_AMD_LV400
+#define PHYS_FLASH_SIZE		0x00080000 /* 512KB */
+#define CONFIG_SYS_MAX_FLASH_SECT	(11)	/* max number of sectors on one chip */
+#define CONFIG_ENV_ADDR		(CONFIG_SYS_FLASH_BASE + 0x070000) /* addr of environment */
+#endif
+
+/* timeout values are in ticks */
+#define CONFIG_SYS_FLASH_ERASE_TOUT	(5*CONFIG_SYS_HZ) /* Timeout for Flash Erase */
+#define CONFIG_SYS_FLASH_WRITE_TOUT	(5*CONFIG_SYS_HZ) /* Timeout for Flash Write */
+
+//#define	CONFIG_ENV_IS_IN_FLASH	1
+#define CONFIG_ENV_IS_IN_NAND   1
+#define CONFIG_ENV_OFFSET       0X60000
+#define CONFIG_ENV_SIZE         0x20000 /*  Total Size of Environment Sector */
+
+/*-----------------------------------------------------------------------
+ * NAND flash settings
+ */
+#if defined(CONFIG_CMD_NAND)
+#define CONFIG_NAND_S3C2410
+#define CONFIG_SYS_NAND_BASE 0x4E000000 
+#define CONFIG_SYS_MAX_NAND_DEVICE      1       /*  Max number of NAND devices           */
+#define SECTORSIZE 512
+#define SECTORSIZE_2K 2048
+#define NAND_SECTOR_SIZE SECTORSIZE
+#define NAND_SECTOR_SIZE_2K SECTORSIZE_2K
+#define NAND_BLOCK_MASK 511
+#define NAND_BLOCK_MASK_2K 2047
+#define NAND_MAX_CHIPS 1
+#define CONFIG_MTD_NAND_VERIFY_WRITE 
+#define CONFIG_SYS_64BIT_VSPRINTF       /*  needed for nand_util.c */ 
+#endif	/* CONFIG_CMD_NAND */
+
+#define CONFIG_SETUP_MEMORY_TAGS
+#define CONFIG_INITRD_TAG
+#define CONFIG_CMDLINE_TAG
+
+#define CONFIG_SYS_HUSH_PARSER
+#define CONFIG_SYS_PROMPT_HUSH_PS2   "> "
+
+//#define CONFIG_CMDLINE_EDITING
+#ifdef CONFIG_CMDLINE_EDITING
+#undef CONFIG_AUTO_COMPLETE
+#else
+#define CONFIG_AUTO_COMPLETE
+#endif
+
+#endif	/* __CONFIG_H */
diff -Nuar u-boot-2010.12/Makefile u-boot-2010.12-fl2440/Makefile
--- u-boot-2010.12/Makefile	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/Makefile	2011-03-23 21:32:34.000000000 +0800
@@ -154,6 +154,7 @@
 # load ARCH, BOARD, and CPU configuration
 include $(obj)include/config.mk
 export	ARCH CPU BOARD VENDOR SOC
+CROSS_COMPILE = /opt/buildroot-eabi/staging/usr/bin/arm-linux-
 
 # set default to nothing for native builds
 ifeq ($(HOSTARCH),$(ARCH))
@@ -1193,6 +1194,18 @@
 #########################################################################
 #########################################################################
 
+uninstall:
+	rm -f /tftpboot/u-boot.bin
+	rm -f ~/winxp/u-boot.bin
+
+install: uninstall
+	cp u-boot.bin /tftpboot
+	cp u-boot.bin ~/winxp
+
+tag:
+	@cscope -Rbq
+	@ctags --c-kinds=+defglmnstuvx --langmap=c:.c.h.ho.hem.het.hec.hev.him.hit.hic.hiv -R .
+
 clean:
 	@rm -f $(obj)examples/standalone/82559_eeprom			  \
 	       $(obj)examples/standalone/atmel_df_pow2			  \
@@ -1237,7 +1250,7 @@
 		-print0 \
 		| xargs -0 rm -f
 	@rm -f $(OBJS) $(obj)*.bak $(obj)ctags $(obj)etags $(obj)TAGS \
-		$(obj)cscope.* $(obj)*.*~
+		$(obj)cscope.* $(obj)*.*~ tags
 	@rm -f $(obj)u-boot $(obj)u-boot.map $(obj)u-boot.hex $(ALL)
 	@rm -f $(obj)u-boot.kwb
 	@rm -f $(obj)u-boot.imx
diff -Nuar u-boot-2010.12/tools/setlocalversion u-boot-2010.12-fl2440/tools/setlocalversion
--- u-boot-2010.12/tools/setlocalversion	2010-12-23 03:22:14.000000000 +0800
+++ u-boot-2010.12-fl2440/tools/setlocalversion	2011-03-23 21:32:34.000000000 +0800
@@ -8,6 +8,9 @@
 
 cd "${1:-.}" || usage
 
+printf '%s' "-fl2440-kkernel"
+exit
+
 # Check for git and a git repo.
 if head=`git rev-parse --verify HEAD 2>/dev/null`; then
 	# Do we have an untagged version?
